

实箭泛化虚实现
虚线依赖实关联
空菱聚合实组合
项目沟通图常见

[spring-boot 官方文档]https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/htmlsingle/#boot-features-connect-to-production-database
[thymeleaf]   https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages



   使用boot连接数据库
   1.在application.properties中设置所需的数据库的配置
   eg：
      spring.datasource.url = jdbc：mysql：// localhost / test
      spring.datasource.username = wyj
      spring.datasource.password = 123456
      dbpass spring.datasource.driver-class-name = org.h2.Driver
    2.导入相应的数据库的依赖（在pom.xml）
       mysql数据库：    <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                        </dependency>
     3.导入jdbc依赖
                   <dependency>
                       <groupId>org.springframework.boot</groupId>
                       <artifactId>spring-boot-starter-jdbc</artifactId>
                   </dependency>


    执行流程
    1.先由DemoApplication运行服务器
    2.在地址栏输入http://localhost:8887/index
    3.spring去寻找@Controller-@GetMapping("/index")然后跳转到index.html页面
    4.在index。html页面的登录标签连接到Github的我的账户访问成功之后根据回调地址回到AuthorizeController.java
    5.在AuthorizeController.java中利用得到的code和state封装到实体类AccessTokenDTO
    6.之后利用GihubProvider里的getAccessToken方法得到token
    7.利用token得到用户名
    8.判断是否得到用户名 得到登录成功 注入实体类User里 利用UserMapper接口注入到数据库



    method=get  渲染页面    post执行请求

    lombok插件    的@Data注解 可以自动添加 get() set()  toString() 方法   放在每个实体类的最上面   要引入 maven依赖
   github页面：https://api.github.com/users/fearless-ky



   分页查询  就是   从客户端  获取页码....  然后利用公式（页码-1）*每页的数据，每页的数据  然后从数据库中利用这个公式来获取相应的数据来显示到客户端
   分页查询
   1.首先在IndexController 中接收两个参数  page  和 size     (defaultValue) 如果没有名称和name匹配  就默认是defaultValue的值
   2.调用questionMapper中的QuestionsearchAll方法来计算总共有多少条数据
   3.调用pageactionDTO中的setPageTotal来实现总页数  上一页 下一页   第一页  最后一页
   4.利用questionMapper中的QuestionsearchPage来算出按照limit所需要显示的数据
   5.然后调用QuestionService中的list方法   （因为在QuestionService里面 通过数据库的操作把相匹配的信息都放入了questionDTO里面）
   6.然后又把questionDTO 封装进了一个QuestionDTO类型的动态数组中   然后又接着封装进了
   7.返回pageactionDTO 到 IndexController  封装到pageactionDTO  返回到前段  index.html


   @RequestBody：主要用于json数据的传递
   @RequestParam：GET和POST请求传的参数会自动转换赋值到@RequestParam 所注解的变量上
   @RequestParam(value = "username") String username,@RequestParam(value = "password") String password,

       7-29
      [thymeleaf]  Including template fragments   可以作用于多个页面使用同一个布局

      @PathVariable("xxx")
      通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“)
        @RequestMapping("show5/{id}/{name}")
          public ModelAndView test5(@PathVariable("id") Long ids ,@PathVariable("name") String names){
              ModelAndView mv = new ModelAndView();
               mv.addObject("msg","占位符映射：id:"+ids+";name:"+names);
                mv.setViewName("hello2");
                return mv;



  ctrl + alt + v    抽取一个变量


